{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Initial Commands": {
		"prefix": "start",
		"body": [
		"#include <bits/stdc++.h>",
		"#ifndef ONLINE_JUDGE",
        "#include \"E:\\Codes\\debug.h\"",
        "#else ",
        "#define debug(x...)",
        "#endif",
        "",
		"using namespace std;",
		"#define ll long long",
		"#define ld long double",
		"#define pll pair<ll,ll>",
		"#define nl \"\\n\"",
		"#define printa(a,L,R) for(int i=L;i<R;i++) cout<<a[i]<<(i==R-1?'\\n':' ')",
		"#define pb push_back",
		"#define UB upper_bound",
		"#define LB lower_bound",
		"#define F first",
		"#define S second",
		"#define mem(a,x) memset(a,x,sizeof(a))",
		"ll cs;",
		"#define _case cout<<\"Case \"<<++cs<<\": \"",
		"#define rev(v) reverse(v.begin(),v.end())",
		"#define vf(v) (v).begin(),(v).end()",
		"#define vr(v) (v).rbegin(),(v).rend()",
		"#define mnv(v) *min_element(v.begin(),v.end())",
		"#define mxv(v) *max_element(v.begin(),v.end())",
		"const ll infi = 1e18;",
		"const ll mod = 1e9+7;",
		"const ll N = 1e6+3;",
		"float pi = 3.141592653589793238462643383279502884197;",
		"//ll dx[]={1,0,-1,0,1,-1,-1,1};",
		"//ll dy[]={0,1,0,-1,1,1,-1,-1};",
		"int main()",
		"{",
		"\tios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);",
    	"\tll t = 1;",
    	"\t// cin >> t;",
		"\t// cin.ignore();",
    	"\twhile (t--)",
		"\t\t{",
		"\t\t\t",
		"\t\t}",
    	"\treturn 0;",
		"}",
		],
		"description": "Initial Code"
	},
	"Dfs code":{
		"prefix": "dfscode",
		"body":[
		"map<ll,vector<ll>>adj;",
		"map<ll,ll>vis;",
		"void dfs(ll s)",
		"{",
		"\tvis[s]=1;",
		"\tfor (auto it : adj[s])",
		"\t{",
		"\t\tif (!vis[it])",
		"\t\t{",
		"\t\t\tdfs(it);",
		"\t\t}",
		"\t}",
		"\tvis[s]=2;",
		"}",
		],
		"description": "dfs code"
	},
	"Bfs code":{
		"prefix": "bfscode",
		"body": [
		"map<ll,vector<ll>>adj;",
		"map<ll,ll>vis,par,level",
		"void bfs(ll s)",
		"{",
		"\tqueue<ll>q;",
		"\tq.push(s);",
		"\tvis[s]=1;",
		"\twhile(!q.empty())",
		"\t{",
		"\t\tll k=q.front();",
		"\t\tq.pop();",
		"\t\tfor(auto it:adj[k])",
		"\t\t{",
		"\t\t\tif(!vis[it])",
		"\t\t\t{",
		"\t\t\t\tq.push(it);",
		"\t\t\t\tpar[it]=k;",
		"\t\t\t\tlevel[it]=level[k]+1;",
		"\t\t\t\tvis[it]=1;",
		"\t\t\t}",
		"\t\t}",
		"\t}",
		"}",
		],
		"description": "bfs code"
	}
}

